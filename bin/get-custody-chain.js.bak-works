

var dbs = [
  // 'dh_lakalle',
  // 'dh_reutilitzaupc',
  // 'dh_reciclanet',
  // 'dhbeta_reutilitzaupc',
  // 'dh_andromines',
  // 'dh_acsrecycling',
  // 'dh_tauorgar',
  'dh_alencop',
  // 'dh_donaloorg',
  // 'dh_iescastellbisbal',
  // 'dh_secondchancemodesto',
  // 'dh_ereuseorg',
  // 'dh_solidanca',
  // 'dh_circuitreutilitzacat',
  // 'dh_computeraid',
  // 'dh_engrunes',
  // 'dh_trinijove'
];

var events = [
  "devices:Snapshot",
  "devices:Ready",
  "devices:Register",
  "devices:Locate",
  "devices:Allocate",
  "devices:Receive",
  "devices:FinalUser",
  "devices:Alive",
  "devices-Recycle",
  "devices:Dispose",
  "devices:Shell",
  "devices:Migrate",
];

var FIRSTDAYOFMONTH = 1;
var START_DATE = new Date(2017, 1, 1);
var END_DATE = new Date(2018, 2, 1);
var MONTH_NAMES = ["January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

var ts = START_DATE;
var next_ts;
var tss = [];
(function setTimeSpans() {
  while(ts.getTime() <= END_DATE.getTime()) {
    if (ts.getMonth() == 11) {
      next_ts = new Date(ts.getFullYear() + 1, 0, FIRSTDAYOFMONTH);
    } else {
      next_ts = new Date(ts.getFullYear(), ts.getMonth() + 1, FIRSTDAYOFMONTH);
    }
    tss.push({
      quarter: parseInt(ts.getMonth() / 3 ) + 1,
      month: ts.getMonth(),
      year: ts.getFullYear(),
      eventCreated : {
	$gt: ts, $lte: next_ts
      }
    });
    ts = next_ts;
  }
})();


var labels = [];
(function setLabels() {
  //labels.push("Non-components created (month)");
  labels = labels.concat(events.map((e) => { return e.substring("devices:".length, e.length)+" (month)";})).join(',');
})();


let originDeviceIDs = [
  '11504',
  '11501',
  '10135',
  '10148',
  '10243',
  '10365',
  '10156',
  '10322',
  '10155',
  '10154',
  '10227',
  '10049',
  '10121',
  '10271',
  '10152',
  '10137',
  '10371',
  '10157',
  '10289',
  '10142',
  '10251',
  '10283',
  '10378',
  '10185',
  '10149',
  '10143',
  '10373',
  '10139',
  '10062',
  '10141',
  '10144',
  '10277',
  '10364',
  '10057',
  '10435',
  '10425',
  '10441',
  '10146',
  '10140',
  '10483',
  '10147',
  '10158',
  '10305',
  '10370',
  '10061',
  '10417',
  '10145',
  '10150',
  '11508',
  '10327',
  '11517',
  '10418',
  '10059',
  '11511',
  '11649',
  '10134',
  '11652',
  '10229',
  '11509',
  '10311',
  '11521',
  '10831',
  '10479',
  '11512',
  '11520',
  '10123',
  '11518',
  '10239',
  '11513',
  '10427',
  '10211',
  '11505',
  '10318',
  '10249',
  '11653',
  '11507',
  '10119',
  '11514',
  '10391',
  '11651',
  '10111',
  '10265',
  '11516',
  '10223',
  '10377',
  '11506',
  '10183',
  '11515',
  '10584',
  '11510',
  '10209',
  '11519',
  '10187',
  '10182',
  '10440',
  '13942',
  '11759',
  '15276',
  '11655',
  '17173',
  '15945',
  '10502',
  '11761',
  '15542',
  '11680',
  '17172',
  '06882',
  '00050',
  '17341',
  '17348',
  '17336',
  '15293',
  '17440',
  '15040',
  '17347',
  '17335',
  '12822',
  '12824',
  '13689',
  '13689',
  '12543',
  '12544',
  '13687',
  '13679',
  '13690',
  '12548',
  '13688',
  '12547',
  '11756',
  '11749',
  '12869',
  '12511',
  '09096',
  '6408',
  '15619',
  '15720',
  '15627',
  '12249',
  '8984',
  '11814',
  'SN04',
  '10900',
  '3160',
  '15736',
  '16637',
  '15017',
  '16000',
  '16576',
  '16605',
  '15980',
  '15993',
  '15989',
  '15009',
  '15138',
  '15988',
  '15387',
  '15007',
  '15982',
  '13939',
  '13929',
  '15527',
  '00034',
  '12502',
  '15781',
  '15780',
  '15656',
  '15531',
  '15622',
  '15620',
  '1936',
  '15979',
  '12296',
  '17872',
  'SN01',
  'SN02',
  'SN03'
];
let deviceIds = [];

function unique(array) {
  var arr = [];
  for(var i = 0; i < array.length; i++) {
    if(!arr.includes(array[i])) {
      arr.push(array[i]);
    }
  }
  return arr; 
}
originDeviceIDs.forEach(function(originID) {
  let foundDeviceIds = [];
  for(var i=0; i<dbs.length; i++) {
    db = db.getSiblingDB(dbs[i]);
    let foundDevices = db.getCollection('devices').find({$or: 
				      [ 
					{ pid: originID }, 
					{ gid: originID }
				      ]
				     }, { _id: 1 }).toArray();

    foundDeviceIds = foundDeviceIds.concat(foundDevices.map(function(d) {
      return d._id;
    }));
  }

  foundDeviceIds = unique(foundDeviceIds);
  if(foundDeviceIds.length > 1) {
    print('ERROR Found more than one device for origin id', originID, foundDeviceIds.length);
  } else if(foundDeviceIds.length == 0) {
    print('WARN Could not find any device for origin id', originID, foundDeviceIds.length);
  } else {
    deviceIds.push(foundDeviceIds[0]);
  }
});

print('INFO Found', deviceIds.length, 'devices');

print("device_hub,quarter,month,year,",labels);
tss.forEach(function(ts) {
  let eventCounts = {};
  events.forEach(function(e) {
    eventCounts[e] = 0;
  });

  //for each device increment count of last event
  deviceIds.forEach(function(id) {
    //get all events in all databases for device
    let deviceEvents = [];
    for(let i=0; i<dbs.length; i++) {
      db = db.getSiblingDB(dbs[i]);
      
      // print("Events", JSON.stringify(events));
      for(let j=0; j<events.length; j++) {
    	//print("Find events of type", events[j]);
    	var query = {
    	  "@type": events[j],
    	  "device": id,
    	  _created: ts.eventCreated
    	};
	//print("Find events of type",query["@type"],"in db", dbs[i],"for device",id);
    	//print("Query", JSON.stringify(query));
    	let eventsFound = db.getCollection('events').find(query).toArray();
    	deviceEvents = deviceEvents.concat(eventsFound);
      }
    }

    //increment count of last event
    if(deviceEvents.length > 0) {
      deviceEvents = deviceEvents.sort(function(a,b){
      	// Turn your strings into dates, and then subtract them
      	// to get a value that is either negative, positive, or zero.
      	return new Date(b.date) - new Date(a.date);
      });
      //print(("Q"+ts.quarter)+","+(ts.month+1)+","+ts.year+", last event: "+deviceEvents[0]["@type"]);
      let lastEvent = deviceEvents[0]["@type"];
      eventCounts[lastEvent] += 1; //count last event only
    }

    //print("INFO found events for device");
  });

  //print
  let eventCountsList = [];
  Object.keys(eventCounts).forEach(function(event) {
    let eventCount = eventCounts[event];
    eventCountsList.push(eventCount);
  });
  print(("Q"+ts.quarter)+","+(ts.month+1)+","+ts.year+","
	+eventCountsList.join());
});













